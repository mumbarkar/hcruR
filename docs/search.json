[{"path":"/articles/hcruR.html","id":"load-library-and-the-data","dir":"Articles","previous_headings":"","what":"Load library and the data","title":"hcruR","text":"","code":"# Load library library(hcruR)  # Load sample data data(hcru_sample_data) data <- hcru_sample_data head(hcru_sample_data) #> # A tibble: 6 × 11 #>   patient_id cohort  encounter_id care_setting visit_date admission_date #>   <chr>      <chr>   <chr>        <chr>        <date>     <date>         #> 1 P_1001     control E_645327     IP           2023-08-23 2023-08-23     #> 2 P_1001     control E_591096     ED           2023-08-27 NA             #> 3 P_1001     control E_864419     OP           2023-09-25 NA             #> 4 P_1001     control E_379584     IP           2023-10-03 2023-10-03     #> 5 P_1001     control E_617025     ED           2024-02-07 NA             #> 6 P_1001     control E_379047     ED           2024-03-01 NA             #> # ℹ 5 more variables: discharge_date <date>, encounter_date <date>, #> #   index_date <date>, period <chr>, cost_usd <dbl>"},{"path":"/articles/hcruR.html","id":"generate-hcru-summary-using-dplyr-this-can-be-used-for-create-hcru-plots","dir":"Articles","previous_headings":"","what":"Generate HCRU summary using dplyr (this can be used for create HCRU plots)","title":"hcruR","text":"","code":"# Step 1: Estimate HCRU hcru_summary <- estimate_hcru(data,   cohort_col = \"cohort\",   patient_id_col = \"patient_id\",   admit_col = \"admission_date\",   discharge_col = \"discharge_date\",   index_col = \"index_date\",   visit_col = \"visit_date\",   encounter_id_col = \"encounter_id\",   setting_col = \"care_setting\",   cost_col = \"cost_usd\",   readmission_col = \"readmission\",   time_window_col = \"period\",   los_col = \"length_of_stay\",   custom_var_list = NULL,   pre_days = 180,   post_days = 365,   readmission_days_rule = 30,   group_var_main = \"cohort\",   group_var_by = \"care_setting\",   test = NULL,   timeline = \"Pre\",   gt_output = FALSE ) #> Warning: The `update` argument of `modify_header()` is deprecated as of gtsummary 2.0.0. #> ℹ Use `modify_header(...)` input instead. Dynamic dots allow for syntax like #>   `modify_header(!!!list(...))`. #> ℹ The deprecated feature was likely used in the gtsummary package. #>   Please report the issue at <https://github.com/ddsjoberg/gtsummary/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  hcru_summary #> $`Summary by settings using dplyr` #> # A tibble: 757 × 15 #>    patient_id cohort  care_setting time_window  Days  Month   Year Visits   Cost #>    <chr>      <chr>   <chr>        <chr>       <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 P_1001     control ED           Post          319 10.5   0.873       2  4677. #>  2 P_1001     control ED           Pre            18  0.592 0.0492      1  1871. #>  3 P_1001     control IP           Post           21  0.690 0.0575      1 23591. #>  4 P_1001     control IP           Pre            22  0.723 0.0602      1 23142. #>  5 P_1001     control OP           Post           13  0.427 0.0356      1   699. #>  6 P_1002     treatm… ED           Post          271  8.91  0.741       2  3088. #>  7 P_1002     treatm… ED           Pre           153  5.03  0.419       1  1869. #>  8 P_1002     treatm… IP           Post          270  8.88  0.739       3 42218. #>  9 P_1002     treatm… OP           Pre           195  6.41  0.534       2  1910. #> 10 P_1003     treatm… ED           Post           59  1.94  0.161       1  4895. #> # ℹ 747 more rows #> # ℹ 6 more variables: LOS <dbl>, Readmission <dbl>, Visit_PPPM <dbl>, #> #   Visit_PPPY <dbl>, Cost_PPPM <dbl>, Cost_PPPY <dbl>"},{"path":"/articles/hcruR.html","id":"generate-hcru-summary-using-gtsummary-a-publication-ready-output","dir":"Articles","previous_headings":"","what":"Generate HCRU summary using gtsummary (a publication ready output)","title":"hcruR","text":"Summary Table","code":"# Step 1: Estimate HCRU hcru_summary_gt <- estimate_hcru(data,   cohort_col = \"cohort\",   patient_id_col = \"patient_id\",   admit_col = \"admission_date\",   discharge_col = \"discharge_date\",   index_col = \"index_date\",   visit_col = \"visit_date\",   encounter_id_col = \"encounter_id\",   setting_col = \"care_setting\",   cost_col = \"cost_usd\",   readmission_col = \"readmission\",   time_window_col = \"period\",   los_col = \"length_of_stay\",   custom_var_list = NULL,   pre_days = 180,   post_days = 365,   readmission_days_rule = 30,   group_var_main = \"cohort\",   group_var_by = \"care_setting\",   test = NULL,   timeline = \"Pre\",   gt_output = TRUE )  hcru_summary_gt$`Summary by settings using gtsummary`"},{"path":"/articles/hcruR.html","id":"generate-the-hcru-plot-average-visits-by-cohort-and-time-line","dir":"Articles","previous_headings":"","what":"Generate the HCRU plot: average visits by cohort and time-line","title":"hcruR","text":"","code":"# Calculate the average visits sum_df1 <- hcru_summary$`Summary by settings using dplyr` |>   dplyr::group_by(     .data[[\"time_window\"]],     .data[[\"cohort\"]],     .data[[\"care_setting\"]]   ) |>   dplyr::summarise(     AVG_VISIT = mean(.data[[\"Visits\"]], na.rm = TRUE), .groups = \"drop\"   )  # Load the plot_hcru function p1 <- plot_hcru(   summary_df = sum_df1,   x_var = \"time_window\",   y_var = \"AVG_VISIT\",   cohort_col = \"cohort\",   facet_var = \"care_setting\",   facet_var_n = 3,   title = \"Average visits by domain and cohort\",   x_label = \"Healthcare Setting (Domain)\",   y_label = \"Average visit\",   fill_label = \"Cohort\" )  p1"},{"path":"/articles/hcruR.html","id":"generate-hcru-plot-for-average-cost-by-cohort-and-timeline","dir":"Articles","previous_headings":"","what":"Generate HCRU plot for average cost by cohort and timeline","title":"hcruR","text":"","code":"# Calculate the total cost df2 <- hcru_summary$`Summary by settings using dplyr` |>   dplyr::group_by(     .data[[\"time_window\"]],     .data[[\"cohort\"]],     .data[[\"care_setting\"]]   ) |>   dplyr::summarise(     AVG_COST = sum(.data[[\"Cost\"]], na.rm = TRUE), .groups = \"drop\"   )  p2 <- plot_hcru(   summary_df = df2,   x_var = \"time_window\",   y_var = \"AVG_COST\",   cohort_col = \"cohort\",   facet_var = \"care_setting\",   facet_var_n = 3,   title = \"Average cost by domain and cohort\",   x_label = \"Healthcare Setting (Domain)\",   y_label = \"Average cost\",   fill_label = \"Cohort\" )  p2"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maheshkumar Umbarkar. Author, maintainer, copyright holder. Safiuddin Shoeb Syed. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Umbarkar M, Syed S (2025). hcruR: Estimate, Compare, Visualize Healthcare Resource Utilization Real-World Evidence. R package version 1.0.0, https://github.com/mumbarkar/hcruR.","code":"@Manual{,   title = {hcruR: Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence},   author = {Maheshkumar Umbarkar and Safiuddin Shoeb Syed},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/mumbarkar/hcruR}, }"},{"path":"/index.html","id":"hcrur-","dir":"","previous_headings":"","what":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"hcruR R package help health economists RWE analysts estimate compare healthcare resource utilization (HCRU) observational healthcare data, claims electronic health records.","code":""},{"path":"/index.html","id":"rocket-features","dir":"","previous_headings":"","what":"🚀 Features","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"Domain (inpatient, outpatient, pharmacy, etc.) Time relative index date (pre/post) Compare HCRU across cohorts Visualize domain-wise HCRU statistics Designed flexible real-world evidence (RWE) workflows","code":""},{"path":"/index.html","id":"inbox_tray-installation","dir":"","previous_headings":"","what":"📥 Installation","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"can install development version hcruR GitHub :","code":"# Install from GitHub (after you upload the repo) # install.packages(\"devtools\") devtools::install_github(\"mumbarkar/hcruR\")  # install.packages(\"pak\") pak::pak(\"mumbarkar/hcruR\")"},{"path":"/index.html","id":"test_tube-example-usage","dir":"","previous_headings":"","what":"🧪 Example Usage","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"basic example shows solve common problem:","code":"This is a basic example which shows you how to solve a common problem:  # Load library library(hcruR)  ## Generate HCRU summary using dplyr (this can be used for create HCRU plots)  # Load sample data data(hcru_sample_data) data <- hcru_sample_data head(hcru_sample_data)  # Estimate HCRU hcru_summary <- estimate_hcru(data,                           cohort_col = \"cohort\",                           patient_id_col = \"patient_id\",                           admit_col = \"admission_date\",                           discharge_col = \"discharge_date\",                           index_col = \"index_date\",                           visit_col = \"visit_date\",                           encounter_id_col = \"encounter_id\",                           setting_col = \"care_setting\",                           cost_col = \"cost_usd\",                           readmission_col = \"readmission\",                           time_window_col = \"period\",                           los_col = \"length_of_stay\",                           custom_var_list = NULL,                           pre_days = 180,                           post_days = 365,                           readmission_days_rule = 30,                           group_var_main = \"cohort\",                           group_var_by = \"care_setting\",                           test = NULL,                           timeline = \"Pre\",                           gt_output = FALSE)  hcru_summary  ## Generate HCRU summary using gtsummary (a publication ready output)   # Estimate HCRU hcru_summary_gt <- estimate_hcru(data,                           cohort_col = \"cohort\",                           patient_id_col = \"patient_id\",                           admit_col = \"admission_date\",                           discharge_col = \"discharge_date\",                           index_col = \"index_date\",                           visit_col = \"visit_date\",                           encounter_id_col = \"encounter_id\",                           setting_col = \"care_setting\",                           cost_col = \"cost_usd\",                           readmission_col = \"readmission\",                           time_window_col = \"period\",                           los_col = \"length_of_stay\",                           custom_var_list = NULL,                           pre_days = 180,                           post_days = 365,                           readmission_days_rule = 30,                           group_var_main = \"cohort\",                           group_var_by = \"care_setting\",                           test = NULL,                           timeline = \"Pre\",                           gt_output = TRUE)  hcru_summary_gt  ## Generate the HCRU plot for average visits by cohort and time-line # Calculate the average visits sum_df1 <- hcru_summary$`Summary by settings using dplyr` |>     dplyr::group_by(       .data[[\"time_window\"]],        .data[[\"cohort\"]],        .data[[\"care_setting\"]]) |>     dplyr::summarise(       AVG_VISIT = mean(.data[[\"Visits\"]], na.rm = TRUE), .groups = \"drop\")  # Load the plot_hcru function p1 <- plot_hcru(   summary_df = sum_df1,   x_var = \"time_window\",   y_var = \"AVG_VISIT\",   cohort_col = \"cohort\",   facet_var = \"care_setting\",   facet_var_n = 3,   title = \"Average visits by domain and cohort\",   x_label = \"Healthcare Setting (Domain)\",   y_label = \"Average visit\",   fill_label = \"Cohort\" )  p1   ## Generate HCRU plot for average cost by cohort and timeline # Calculate the total cost df2 <- hcru_summary$`Summary by settings using dplyr` |>     dplyr::group_by(       .data[[\"time_window\"]],        .data[[\"cohort\"]],        .data[[\"care_setting\"]]) |>     dplyr::summarise(       AVG_COST = sum(.data[[\"Cost\"]], na.rm = TRUE), .groups = \"drop\")  p2 <- plot_hcru(   summary_df = df2,   x_var = \"time_window\",   y_var = \"AVG_COST\",   cohort_col = \"cohort\",   facet_var = \"care_setting\",   facet_var_n = 3,   title = \"Average cost by domain and cohort\",   x_label = \"Healthcare Setting (Domain)\",   y_label = \"Average cost\",   fill_label = \"Cohort\" )  p2"},{"path":"/index.html","id":"receipt-function-reference","dir":"","previous_headings":"","what":"🧾 Function Reference","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"estimate_hcru() estimates healthcare resource utilization (HCRU) electronic health record data across various care settings (e.g., IP, OP, ED/ER). provides descriptive summaries patient counts, encounters, costs, length stay, readmission rates pre- post-index periods","code":""},{"path":"/index.html","id":"arguments","dir":"","previous_headings":"🧾 Function Reference","what":"Arguments","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"plot_hcru() provides visualization events settings/domains grouped cohort time window.","code":""},{"path":[]},{"path":"/index.html","id":"bar_chart-sample-data","dir":"","previous_headings":"","what":"📊 Sample Data","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"package includes demo datasets easy testing: hcru_sample_data: 200 patients across 2 cohorts","code":"head(hcru_sample_data)"},{"path":"/index.html","id":"books-vignette","dir":"","previous_headings":"","what":"📚 Vignette","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"Run following access full walkthrough:","code":"vignette(\"hcru-analysis\", package = \"hcruR\")"},{"path":"/index.html","id":"microscope-use-cases","dir":"","previous_headings":"","what":"🔬 Use Cases","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"Cost burden studies /treatment Resource comparison across patient populations Outcome stratification based utilization patterns","code":""},{"path":"/index.html","id":"hammer_and_wrench-development","dir":"","previous_headings":"","what":"🛠️ Development","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"contribute:","code":"git clone https://github.com/mumbarkar/hcruR.git cd hcruR"},{"path":"/index.html","id":"scroll-license","dir":"","previous_headings":"","what":"📜 License","title":"Estimate, Compare, and Visualize Healthcare Resource Utilization for Real-World Evidence","text":"package licensed MIT License.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 hcruR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/estimate_hcru.html","id":null,"dir":"Reference","previous_headings":"","what":"estimate_hcru — estimate_hcru","title":"estimate_hcru — estimate_hcru","text":"function calculates estimates healthcare resource utilization (HCRU) electronic health record data across various care settings (e.g., IP, OP, ED/ER). provides descriptive summaries patient counts, encounters, costs, length stay, readmission rates pre- post-index periods.","code":""},{"path":"/reference/estimate_hcru.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"estimate_hcru — estimate_hcru","text":"","code":"estimate_hcru(   data,   cohort_col = \"cohort\",   patient_id_col = \"patient_id\",   admit_col = \"admission_date\",   discharge_col = \"discharge_date\",   index_col = \"index_date\",   visit_col = \"visit_date\",   encounter_id_col = \"encounter_id\",   setting_col = \"care_setting\",   cost_col = \"cost_usd\",   readmission_col = \"readmission\",   time_window_col = \"period\",   los_col = \"length_of_stay\",   custom_var_list = NULL,   pre_days = 180,   post_days = 365,   readmission_days_rule = 30,   group_var_main = \"cohort\",   group_var_by = \"care_setting\",   test = NULL,   timeline = \"Pre\",   gt_output = TRUE )"},{"path":"/reference/estimate_hcru.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"estimate_hcru — estimate_hcru","text":"data dataframe specifying health care details. cohort_col character specifying name cohort column. patient_id_col character specifying name patient identifier column. admit_col character specifying name date admission column. discharge_col character specifying name date discharge column. index_col character specifying name index date diagnosis column. visit_col character specifying name date visit/claim column. encounter_id_col character specifying name encounter/claim column. setting_col character specifying name HCRU setting column e.g. IP, ED, OP, etc. cost_col character specifying name cost column. readmission_col character specifying name readmission column. time_window_col character specifying name time window column. los_col character specifying name length stay column. custom_var_list character vector providing list additional columns. pre_days Number days index (default 180 days). post_days Number days index (default 365 days). readmission_days_rule Rule many days can permissible define readmission criteria AP setting (default 30 days). group_var_main character specifying name main grouping column. group_var_by character specifying name secondary grouping column. test optional named list statistical tests (e.g., list(age = \"wilcox.test\")). timeline character specifying timeline window (default \"Pre\"). gt_output Logical; TRUE, also returns output formatted using gtsummary (default TRUE).","code":""},{"path":"/reference/estimate_hcru.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"estimate_hcru — estimate_hcru","text":"list containing one two summary data frames: Summary settings using dplyr descriptive summary HCRU   metrics cohort, setting, time window. Summary settings using gtsummary (optional) Formatted summary   statistics using gtsummary, gt_output = TRUE.","code":""},{"path":"/reference/estimate_hcru.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"estimate_hcru — estimate_hcru","text":"","code":"# \\donttest{ df <- hcru_sample_data[sample(nrow(hcru_sample_data), 10), ] estimate_hcru(data = df) #> Warning: The `update` argument of `modify_header()` is deprecated as of gtsummary 2.0.0. #> ℹ Use `modify_header(...)` input instead. Dynamic dots allow for syntax like #>   `modify_header(!!!list(...))`. #> ℹ The deprecated feature was likely used in the gtsummary package. #>   Please report the issue at <https://github.com/ddsjoberg/gtsummary/issues>. #> $`Summary by settings using dplyr` #> # A tibble: 9 × 15 #>   patient_id cohort    care_setting time_window  Days Month   Year Visits   Cost #>   <chr>      <chr>     <chr>        <chr>       <dbl> <dbl>  <dbl>  <dbl>  <dbl> #> 1 P_1015     control   OP           Pre            14 0.460 0.0383      1   587. #> 2 P_1038     control   OP           Pre            82 2.70  0.224       1   175. #> 3 P_1085     control   ED           Post           87 2.86  0.238       1  4572. #> 4 P_1090     treatment ED           Pre             5 0.164 0.0137      1  4885. #> 5 P_1096     treatment OP           Post            8 0.263 0.0219      1   775. #> 6 P_1100     treatment OP           Post           80 2.63  0.219       1  1882. #> 7 P_1105     treatment ED           Pre            32 1.05  0.0876      1  1312. #> 8 P_1164     treatment IP           Post           85 2.79  0.233       1 16170. #> 9 P_1170     treatment IP           Post          155 5.10  0.424       1  7040. #> # ℹ 6 more variables: LOS <dbl>, Readmission <dbl>, Visit_PPPM <dbl>, #> #   Visit_PPPY <dbl>, Cost_PPPM <dbl>, Cost_PPPY <dbl> #>  #> $`Summary by settings using gtsummary` #> <div id=\"wkkeulbfdp\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#wkkeulbfdp table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #wkkeulbfdp thead, #wkkeulbfdp tbody, #wkkeulbfdp tfoot, #wkkeulbfdp tr, #wkkeulbfdp td, #wkkeulbfdp th { #>   border-style: none; #> } #>  #> #wkkeulbfdp p { #>   margin: 0; #>   padding: 0; #> } #>  #> #wkkeulbfdp .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #wkkeulbfdp .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #wkkeulbfdp .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #wkkeulbfdp .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #wkkeulbfdp .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #wkkeulbfdp .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #wkkeulbfdp .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #wkkeulbfdp .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #wkkeulbfdp .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #wkkeulbfdp .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #wkkeulbfdp .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #wkkeulbfdp .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #wkkeulbfdp .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #wkkeulbfdp .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #wkkeulbfdp .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #wkkeulbfdp .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #wkkeulbfdp .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #wkkeulbfdp .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #wkkeulbfdp .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #wkkeulbfdp .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #wkkeulbfdp .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #wkkeulbfdp .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #wkkeulbfdp .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #wkkeulbfdp .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #wkkeulbfdp .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #wkkeulbfdp .gt_left { #>   text-align: left; #> } #>  #> #wkkeulbfdp .gt_center { #>   text-align: center; #> } #>  #> #wkkeulbfdp .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #wkkeulbfdp .gt_font_normal { #>   font-weight: normal; #> } #>  #> #wkkeulbfdp .gt_font_bold { #>   font-weight: bold; #> } #>  #> #wkkeulbfdp .gt_font_italic { #>   font-style: italic; #> } #>  #> #wkkeulbfdp .gt_super { #>   font-size: 65%; #> } #>  #> #wkkeulbfdp .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #wkkeulbfdp .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #wkkeulbfdp .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #wkkeulbfdp .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #wkkeulbfdp .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #wkkeulbfdp .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #wkkeulbfdp .gt_indent_5 { #>   text-indent: 25px; #> } #>  #> #wkkeulbfdp .katex-display { #>   display: inline-flex !important; #>   margin-bottom: 0.75em !important; #> } #>  #> #wkkeulbfdp div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { #>   height: 0px !important; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <!--/html_preserve--><caption class='gt_caption'><span class='gt_from_md'><strong>Summary Table<\/strong><\/span><\/caption><!--html_preserve--> #>   <thead> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"label\"><span class='gt_from_md'><strong>Characteristic<\/strong><\/span><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"level 1; stat_1_1\"> #>         <div class=\"gt_column_spanner\"><span class='gt_from_md'>OP<\/span><\/div> #>       <\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"level 1; stat_1_2\"> #>         <div class=\"gt_column_spanner\"><span class='gt_from_md'>ED<\/span><\/div> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"stat_1_1\"><span class='gt_from_md'>control, N = 2<\/span><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1<\/sup><\/span><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"stat_1_2\"><span class='gt_from_md'>treatment, N = 2<\/span><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1<\/sup><\/span><\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">Visits<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    1<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">2 (100%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">2 (100%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">Cost<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    175.25<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    586.6<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">Visit_PPPM<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    0.370939024390244<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    2.17264285714286<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">Visit_PPPY<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    4.45731707317073<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    26.1071428571429<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">Cost_PPPM<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    65.0070640243902<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    1274.4723<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">Cost_PPPY<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    781.144817073171<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    15314.45<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\">1 (50%)<\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\"><br /><\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    1312.47<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    4885.25<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    0.95053125<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    6.0834<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    11.421875<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    73.1<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    1247.5437496875<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    29718.92985<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    14990.86828125<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>     <tr><td headers=\"label\" class=\"gt_row gt_left\">    357111.775<\/td> #> <td headers=\"stat_1_1\" class=\"gt_row gt_center\"><br /><\/td> #> <td headers=\"stat_1_2\" class=\"gt_row gt_center\">1 (50%)<\/td><\/tr> #>   <\/tbody> #>    #>   <tfoot class=\"gt_footnotes\"> #>     <tr> #>       <td class=\"gt_footnote\" colspan=\"3\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height:0;\"><sup>1<\/sup><\/span> <span class='gt_from_md'>n (%)<\/span><\/td> #>     <\/tr> #>   <\/tfoot> #> <\/table> #> <\/div> #>  # }"},{"path":"/reference/hcru_sample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Cohort Data — hcru_sample_data","title":"Sample Cohort Data — hcru_sample_data","text":"sample dataset representing patient cohort index dates.","code":""},{"path":"/reference/hcru_sample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Cohort Data — hcru_sample_data","text":"","code":"hcru_sample_data"},{"path":"/reference/hcru_sample_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Cohort Data — hcru_sample_data","text":"data frame columns: patient_id Unique patient identifier cohort Cohort identifier (e.g., treatment group) index_date Index date (Date) encounter_id encounter/claim identifier (e.g., claim number) care_setting HCRU domain types (e.g., IP, OP, ER, etc.) visit_date Visit date (Date) admission_date Admission date (Date) discharge_date Discharge date (Date) encounter_date Encounter/Claim date (Date) period period (e.g., Pre/Post) cost_usd Cost utilization health resources","code":""},{"path":"/reference/hcru_sample_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample Cohort Data — hcru_sample_data","text":"Simulated data","code":""},{"path":"/reference/plot_hcru.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_hcru — plot_hcru","title":"plot_hcru — plot_hcru","text":"function provides visualization events settings grouped cohort time window.","code":""},{"path":"/reference/plot_hcru.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_hcru — plot_hcru","text":"","code":"plot_hcru(   summary_df,   x_var = \"time_window\",   y_var = \"Cost\",   cohort_col = \"cohort\",   facet_var = \"care_setting\",   facet_var_n = 3,   title = \"Average total cost by domain and cohort\",   x_label = \"Healthcare Setting (Domain)\",   y_label = \"Average total cost\",   fill_label = \"Cohort\" )"},{"path":"/reference/plot_hcru.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_hcru — plot_hcru","text":"summary_df Output estimate_hcru() x_var character specifying column name plotted x-axis y_var character specifying column name plotted y-axis cohort_col character specifying cohort column name facet_var character specifying column name generate faceted plots facet_var_n numeric specifying number columns facet output title character specifying plot title x_label character specifying x-axis label y_label character specifying y-axis label fill_label character specifying fill legend label","code":""},{"path":"/reference/plot_hcru.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_hcru — plot_hcru","text":"ggplot object","code":""},{"path":"/reference/plot_hcru.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot_hcru — plot_hcru","text":"Plot HCRU Event Summary","code":""},{"path":"/reference/plot_hcru.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot_hcru — plot_hcru","text":"","code":"df <- data.frame(   time_window = rep(c(\"Pre\", \"Post\"), each = 2),   cohort = rep(c(\"A\", \"B\"), 2),   care_setting = rep(\"Setting1\", 4),   Cost = c(100, 120, 110, 130) ) plot_hcru(   summary_df = df,   x_var = \"time_window\",   y_var = \"Cost\",   cohort_col = \"cohort\",   facet_var = \"care_setting\",   facet_var_n = 1,   title = \"Example Plot\",   x_label = \"Time Window\",   y_label = \"Cost\",   fill_label = \"Cohort\" )"},{"path":"/reference/preproc_hcru_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"preproc_hcru_fun — preproc_hcru_fun","title":"preproc_hcru_fun — preproc_hcru_fun","text":"function helps pre-process heath care resource utilization (HCRU) given electronic health record data given set settings e.g. IP, OP, ED/ER, etc.","code":""},{"path":"/reference/preproc_hcru_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"preproc_hcru_fun — preproc_hcru_fun","text":"","code":"preproc_hcru_fun(   data,   cohort_col = \"cohort\",   patient_id_col = \"patient_id\",   admit_col = \"admission_date\",   discharge_col = \"discharge_date\",   index_col = \"index_date\",   visit_col = \"visit_date\",   encounter_id_col = \"encounter_id\",   setting_col = \"care_setting\",   pre_days = 180,   post_days = 365,   readmission_days_rule = 30 )"},{"path":"/reference/preproc_hcru_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"preproc_hcru_fun — preproc_hcru_fun","text":"data dataframe specifying health care details cohort_col character specifying name cohort column patient_id_col character specifying name patient identifier column admit_col character specifying name date admission column discharge_col character specifying name date discharge column index_col character specifying name index date diagnosis column visit_col character specifying name date visit/claim column encounter_id_col character specifying name encounter/claim column setting_col character specifying name HCRU setting column e.g. IP, ED, OP, etc. pre_days Number days index (default 180 days) post_days Number days index (default 365 days) readmission_days_rule Rule many days can permissible define readmission criteria AP setting (default 30 days)","code":""},{"path":"/reference/preproc_hcru_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"preproc_hcru_fun — preproc_hcru_fun","text":"dataframe HCRU estimates.","code":""},{"path":"/reference/preproc_hcru_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"preproc_hcru_fun — preproc_hcru_fun","text":"","code":"# \\donttest{ preproc_hcru_fun(data = hcru_sample_data) #> # A tibble: 1,089 × 17 #>    patient_id cohort  encounter_id care_setting visit_date admission_date #>    <chr>      <chr>   <chr>        <chr>        <date>     <date>         #>  1 P_1001     control E_645327     IP           2023-08-23 2023-08-23     #>  2 P_1001     control E_379584     IP           2023-10-03 2023-10-03     #>  3 P_1001     control E_591096     ED           2023-08-27 NA             #>  4 P_1001     control E_864419     OP           2023-09-25 NA             #>  5 P_1001     control E_617025     ED           2024-02-07 NA             #>  6 P_1001     control E_379047     ED           2024-03-01 NA             #>  7 P_1005     control E_430504     IP           2023-04-13 2023-04-13     #>  8 P_1005     control E_921506     IP           2023-05-11 2023-05-11     #>  9 P_1005     control E_914515     OP           2023-09-07 NA             #> 10 P_1005     control E_467081     OP           2023-10-27 NA             #> # ℹ 1,079 more rows #> # ℹ 11 more variables: discharge_date <date>, encounter_date <date>, #> #   index_date <date>, period <chr>, cost_usd <dbl>, visit_days <dbl>, #> #   time_window <chr>, length_of_stay <dbl>, next_admit <date>, #> #   days_to_next <dbl>, readmission <dbl> # }"},{"path":"/reference/summarize_descriptives.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Detailed Descriptive Statistics — summarize_descriptives","title":"Generate Detailed Descriptive Statistics — summarize_descriptives","text":"Generate Detailed Descriptive Statistics","code":""},{"path":"/reference/summarize_descriptives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Detailed Descriptive Statistics — summarize_descriptives","text":"","code":"summarize_descriptives(   data,   patient_id_col = \"patient_id\",   setting_col = \"care_setting\",   cohort_col = \"cohort\",   encounter_id_col = \"encounter_id\",   cost_col = \"cost_usd\",   los_col = \"length_of_stay\",   readmission_col = \"readmission\",   time_window_col = \"time_window\" )"},{"path":"/reference/summarize_descriptives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Detailed Descriptive Statistics — summarize_descriptives","text":"data dataframe variables summarize. patient_id_col character specifying name patient identifier column setting_col character specifying name HRCU setting column cohort_col character specifying name cohort column encounter_id_col character specifying name encounter/claim column cost_col character specifying name cost column los_col character specifying name length stay column readmission_col character specifying name readmission column time_window_col character specifying name time window column","code":""},{"path":"/reference/summarize_descriptives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Detailed Descriptive Statistics — summarize_descriptives","text":"table object","code":""},{"path":"/reference/summarize_descriptives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Detailed Descriptive Statistics — summarize_descriptives","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE) &&     requireNamespace(\"checkmate\", quietly = TRUE)) {   hcru_sample_data <- data.frame(     patient_id = rep(1:10, each = 2),     cohort = rep(c(\"A\", \"B\"), 10),     care_setting = rep(c(\"IP\", \"OP\"), 10),     admission_date = Sys.Date() - sample(1:100, 20, TRUE),     discharge_date = Sys.Date() - sample(1:90, 20, TRUE),     index_date = Sys.Date() - 50,     visit_date = Sys.Date() - sample(1:100, 20, TRUE),     encounter_id = 1:20,     cost_usd = runif(20, 100, 1000)   )   df <- preproc_hcru_fun(data = hcru_sample_data)   summary_df <- summarize_descriptives(data = df)   # Only keep required columns for demonstration   summary_df$LOS <- ifelse(summary_df$care_setting == \"IP\",     sample(1:10, nrow(summary_df), TRUE), NA)   summary_df$Readmission <- ifelse(summary_df$care_setting == \"IP\",     sample(0:1, nrow(summary_df), TRUE), NA)   summary_df$time_window <- \"Pre\"   summary_df } #> # A tibble: 20 × 15 #>    patient_id cohort care_setting time_window  Days  Month    Year Visits  Cost #>         <int> <chr>  <chr>        <chr>       <dbl>  <dbl>   <dbl>  <dbl> <dbl> #>  1          1 A      IP           Pre             7 0.230  0.0192       1  136. #>  2          1 B      OP           Pre             5 0.164  0.0137       1  950. #>  3          2 A      IP           Pre            36 1.18   0.0985       1  320. #>  4          2 B      OP           Pre             9 0.296  0.0246       1  803. #>  5          3 A      IP           Pre            22 0.723  0.0602       1  359. #>  6          3 B      OP           Pre            25 0.822  0.0684       1  888. #>  7          4 A      IP           Pre            18 0.592  0.0492       1  366. #>  8          4 B      OP           Pre            51 1.68   0.140        1  985. #>  9          5 A      IP           Pre            37 1.22   0.101        1  631. #> 10          5 B      OP           Pre            17 0.559  0.0465       1  783. #> 11          6 A      IP           Pre            20 0.658  0.0547       1  852. #> 12          6 B      OP           Pre            33 1.08   0.0903       1  787. #> 13          7 A      IP           Pre            14 0.460  0.0383       1  476. #> 14          7 B      OP           Pre            47 1.55   0.129        1  224. #> 15          8 A      IP           Pre            34 1.12   0.0930       1  173. #> 16          8 B      OP           Pre             7 0.230  0.0192       1  690. #> 17          9 A      IP           Pre             3 0.0986 0.00821      1  642. #> 18          9 B      OP           Pre             8 0.263  0.0219       1  691. #> 19         10 A      IP           Pre            34 1.12   0.0930       1  396. #> 20         10 B      OP           Pre            38 1.25   0.104        1  982. #> # ℹ 6 more variables: LOS <int>, Readmission <int>, Visit_PPPM <dbl>, #> #   Visit_PPPY <dbl>, Cost_PPPM <dbl>, Cost_PPPY <dbl>"},{"path":"/reference/summarize_descriptives_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Detailed Descriptive Statistics with Custom P-Value Tests — summarize_descriptives_gt","title":"Generate Detailed Descriptive Statistics with Custom P-Value Tests — summarize_descriptives_gt","text":"Generate Detailed Descriptive Statistics Custom P-Value Tests","code":""},{"path":"/reference/summarize_descriptives_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Detailed Descriptive Statistics with Custom P-Value Tests — summarize_descriptives_gt","text":"","code":"summarize_descriptives_gt(   data,   patient_id_col = \"patient_id\",   var_list = NULL,   group_var_main = \"cohort\",   group_var_by = \"care_setting\",   test = NULL,   timeline = \"Pre\" )"},{"path":"/reference/summarize_descriptives_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Detailed Descriptive Statistics with Custom P-Value Tests — summarize_descriptives_gt","text":"data dataframe variables summarize output summarize_descriptives function. Kindly filter data timeline. patient_id_col character specifying name patient identifier column. var_list Optional quoted variable list (e.g. care_setting). group_var_main character specifying name main grouping column. group_var_by character specifying name secondary grouping column. test Optional named list statistical tests (e.g. age ~ \"wilcox.test\"). timeline character specifying timeline window (default \"Pre\").","code":""},{"path":"/reference/summarize_descriptives_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Detailed Descriptive Statistics with Custom P-Value Tests — summarize_descriptives_gt","text":"gtsummary table object","code":""},{"path":"/reference/summarize_descriptives_gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Detailed Descriptive Statistics with Custom P-Value Tests — summarize_descriptives_gt","text":"Summary Table","code":"# \\donttest{ if (requireNamespace(\"gtsummary\", quietly = TRUE) &&     requireNamespace(\"dplyr\", quietly = TRUE) &&     requireNamespace(\"purrr\", quietly = TRUE) &&     requireNamespace(\"checkmate\", quietly = TRUE) &&     requireNamespace(\"glue\", quietly = TRUE)) {   hcru_sample_data <- data.frame(     patient_id = rep(1:10, each = 2),     cohort = rep(c(\"A\", \"B\"), 10),     care_setting = rep(c(\"IP\", \"OP\"), 10),     admission_date = Sys.Date() - sample(1:100, 20, TRUE),     discharge_date = Sys.Date() - sample(1:90, 20, TRUE),     index_date = Sys.Date() - 50,     visit_date = Sys.Date() - sample(1:100, 20, TRUE),     encounter_id = 1:20,     cost_usd = runif(20, 100, 1000)   )   df <- preproc_hcru_fun(data = hcru_sample_data)   summary_df <- summarize_descriptives(data = df)   # Only keep required columns for demonstration   summary_df$LOS <- ifelse(summary_df$care_setting == \"IP\", sample(1:10, nrow(summary_df), TRUE), NA)   summary_df$Readmission <- ifelse(summary_df$care_setting == \"IP\", sample(0:1, nrow(summary_df), TRUE), NA)   summary_df$time_window <- \"Pre\"   # Run the function (should execute within 5 seconds)   summarize_descriptives_gt(     data = summary_df,     patient_id_col = \"patient_id\",     var_list = c(\"Visits\", \"Cost\", \"LOS\", \"Readmission\"),     group_var_main = \"cohort\",     group_var_by = \"care_setting\",     timeline = \"Pre\"   ) }     Summary Table   Characteristic                IP                       OP            A, N = 101       B, N = 101     Visits      1 10 (100%) 10 (100%)Cost      Sum 6,298 7,344    Mean (SD) 630 (303) 734 (288)    Median (Q1, Q3) 633 (383, 897) 876 (495, 943)    Q1 383 495    Q3 897 943    Min - Max 131 - 974 142 - 995LOS      1 2 (20%)     2 1 (10%)     5 2 (20%)     6 1 (10%)     7 1 (10%)     8 1 (10%)     9 1 (10%)     10 1 (10%) Readmission 5 (50%) 1 n (%)     # }"},{"path":"/news/index.html","id":"hcrur-100","dir":"Changelog","previous_headings":"","what":"hcruR 1.0.0","title":"hcruR 1.0.0","text":"Initial CRAN submission.","code":""}]
